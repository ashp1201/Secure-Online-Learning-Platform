<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- Scan for controllers, services, DAOs -->
    <context:component-scan base-package="com.example" />

	 
	 

 
	<!-- Protect API endpoints and dashboard pages with JWT authentication
	<security:http entry-point-ref="jwtAuthEntryPoint">
		<security:custom-filter ref="jwtFilter" position="PRE_AUTH_FILTER"/>
		<security:intercept-url pattern="/courses/**" access="hasRole('INSTRUCTOR') or hasRole('STUDENT')"/>
		<security:intercept-url pattern="/enrollments/**" access="hasRole('INSTRUCTOR') or hasRole('STUDENT')"/>
		<security:intercept-url pattern="/progress/**" access="hasRole('INSTRUCTOR') or hasRole('STUDENT')"/>
		<security:intercept-url pattern="/upload/**" access="hasRole('INSTRUCTOR') or hasRole('STUDENT')"/>

		<security:csrf disabled="true"/>
	</security:http>  -->
	
	
		<!-- Security configuration -->
	<security:http pattern="/auth/login" security="none"/>
	<security:http pattern="/auth/register" security="none"/>
	<security:http pattern="/videos/**" security="none"/> 
	
	<security:http pattern="/index" security="none"/>
	<security:http pattern="/studentDashboard" security="none"/>
	<security:http pattern="/instructorDashboard" security="none"/>
	
    <security:http entry-point-ref="jwtAuthEntryPoint" create-session="stateless" authentication-manager-ref="authenticationManager" use-expressions="true">
        <security:custom-filter ref="jwtFilter" before="FORM_LOGIN_FILTER"/>
		<security:intercept-url pattern="/courses/**"  access="isAuthenticated()"/>
		<security:intercept-url pattern="/enrollments/**" access="isAuthenticated()"/>
		<security:intercept-url pattern="/progress/**" access="isAuthenticated()"/>
		<security:intercept-url pattern="/upload/**" access="isAuthenticated()"/>
		<security:intercept-url pattern="/users/**" access="isAuthenticated()"/>
		
		

		<security:csrf disabled="true"/>
	</security:http> 
    
    <!-- JWT Authentication Filter Bean -->
    <bean id="jwtFilter" class="com.example.security.JwtAuthenticationFilter"/>
    <bean id="jwtAuthEntryPoint" class="com.example.security.JwtAuthEntryPoint"/>
    
    <bean id="customUserDetailsService" class="com.example.security.CustomUserDetailsService"/>
    
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg value="12"/>
		</bean>
		
		
<bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver"/>
	
    
    <!-- Authentication manager -->
    <security:authentication-manager alias="authenticationManager">
         <security:authentication-provider user-service-ref="customUserDetailsService">
             <security:password-encoder ref="passwordEncoder"/>
         </security:authentication-provider>
    </security:authentication-manager> 
    
    
    <!-- Enable Spring MVC annotations -->
    <mvc:annotation-driven />

    <!-- PostgreSQL DataSource -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost:5432/OnlineLearningPlatformDb" />
        <property name="username" value="postgres" />
        <property name="password" value="Ashokp1201@" />
    </bean>

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="com.example.entity" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>
    
    <!-- HibernateUtil bean -->
	<bean id="hibernateUtil" class="com.example.helper.HibernateUtil">
	    <constructor-arg ref="sessionFactory"/>
	</bean>

    <!-- JSP View Resolver -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- Transaction Manager -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- Enable @Transactional -->
    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>
